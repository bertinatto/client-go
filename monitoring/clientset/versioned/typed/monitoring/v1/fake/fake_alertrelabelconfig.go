// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/monitoring/v1"
	monitoringv1 "github.com/openshift/client-go/monitoring/applyconfigurations/monitoring/v1"
	typedmonitoringv1 "github.com/openshift/client-go/monitoring/clientset/versioned/typed/monitoring/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeAlertRelabelConfigs implements AlertRelabelConfigInterface
type fakeAlertRelabelConfigs struct {
	*gentype.FakeClientWithListAndApply[*v1.AlertRelabelConfig, *v1.AlertRelabelConfigList, *monitoringv1.AlertRelabelConfigApplyConfiguration]
	Fake *FakeMonitoringV1
}

func newFakeAlertRelabelConfigs(fake *FakeMonitoringV1, namespace string) typedmonitoringv1.AlertRelabelConfigInterface {
	return &fakeAlertRelabelConfigs{
		gentype.NewFakeClientWithListAndApply[*v1.AlertRelabelConfig, *v1.AlertRelabelConfigList, *monitoringv1.AlertRelabelConfigApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("alertrelabelconfigs"),
			v1.SchemeGroupVersion.WithKind("AlertRelabelConfig"),
			func() *v1.AlertRelabelConfig { return &v1.AlertRelabelConfig{} },
			func() *v1.AlertRelabelConfigList { return &v1.AlertRelabelConfigList{} },
			func(dst, src *v1.AlertRelabelConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1.AlertRelabelConfigList) []*v1.AlertRelabelConfig {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.AlertRelabelConfigList, items []*v1.AlertRelabelConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
