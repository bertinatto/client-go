// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/monitoring/v1"
	monitoringv1 "github.com/openshift/client-go/monitoring/applyconfigurations/monitoring/v1"
	typedmonitoringv1 "github.com/openshift/client-go/monitoring/clientset/versioned/typed/monitoring/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeAlertingRules implements AlertingRuleInterface
type fakeAlertingRules struct {
	*gentype.FakeClientWithListAndApply[*v1.AlertingRule, *v1.AlertingRuleList, *monitoringv1.AlertingRuleApplyConfiguration]
	Fake *FakeMonitoringV1
}

func newFakeAlertingRules(fake *FakeMonitoringV1, namespace string) typedmonitoringv1.AlertingRuleInterface {
	return &fakeAlertingRules{
		gentype.NewFakeClientWithListAndApply[*v1.AlertingRule, *v1.AlertingRuleList, *monitoringv1.AlertingRuleApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("alertingrules"),
			v1.SchemeGroupVersion.WithKind("AlertingRule"),
			func() *v1.AlertingRule { return &v1.AlertingRule{} },
			func() *v1.AlertingRuleList { return &v1.AlertingRuleList{} },
			func(dst, src *v1.AlertingRuleList) { dst.ListMeta = src.ListMeta },
			func(list *v1.AlertingRuleList) []*v1.AlertingRule { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.AlertingRuleList, items []*v1.AlertingRule) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
