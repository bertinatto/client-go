// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/console/v1"
	consolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	typedconsolev1 "github.com/openshift/client-go/console/clientset/versioned/typed/console/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeConsoleYAMLSamples implements ConsoleYAMLSampleInterface
type fakeConsoleYAMLSamples struct {
	*gentype.FakeClientWithListAndApply[*v1.ConsoleYAMLSample, *v1.ConsoleYAMLSampleList, *consolev1.ConsoleYAMLSampleApplyConfiguration]
	Fake *FakeConsoleV1
}

func newFakeConsoleYAMLSamples(fake *FakeConsoleV1) typedconsolev1.ConsoleYAMLSampleInterface {
	return &fakeConsoleYAMLSamples{
		gentype.NewFakeClientWithListAndApply[*v1.ConsoleYAMLSample, *v1.ConsoleYAMLSampleList, *consolev1.ConsoleYAMLSampleApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("consoleyamlsamples"),
			v1.SchemeGroupVersion.WithKind("ConsoleYAMLSample"),
			func() *v1.ConsoleYAMLSample { return &v1.ConsoleYAMLSample{} },
			func() *v1.ConsoleYAMLSampleList { return &v1.ConsoleYAMLSampleList{} },
			func(dst, src *v1.ConsoleYAMLSampleList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ConsoleYAMLSampleList) []*v1.ConsoleYAMLSample {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.ConsoleYAMLSampleList, items []*v1.ConsoleYAMLSample) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
