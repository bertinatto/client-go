// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/console/v1"
	consolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	typedconsolev1 "github.com/openshift/client-go/console/clientset/versioned/typed/console/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeConsolePlugins implements ConsolePluginInterface
type fakeConsolePlugins struct {
	*gentype.FakeClientWithListAndApply[*v1.ConsolePlugin, *v1.ConsolePluginList, *consolev1.ConsolePluginApplyConfiguration]
	Fake *FakeConsoleV1
}

func newFakeConsolePlugins(fake *FakeConsoleV1) typedconsolev1.ConsolePluginInterface {
	return &fakeConsolePlugins{
		gentype.NewFakeClientWithListAndApply[*v1.ConsolePlugin, *v1.ConsolePluginList, *consolev1.ConsolePluginApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("consoleplugins"),
			v1.SchemeGroupVersion.WithKind("ConsolePlugin"),
			func() *v1.ConsolePlugin { return &v1.ConsolePlugin{} },
			func() *v1.ConsolePluginList { return &v1.ConsolePluginList{} },
			func(dst, src *v1.ConsolePluginList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ConsolePluginList) []*v1.ConsolePlugin { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ConsolePluginList, items []*v1.ConsolePlugin) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
