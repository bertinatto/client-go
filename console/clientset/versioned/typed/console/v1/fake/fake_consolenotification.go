// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/console/v1"
	consolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	typedconsolev1 "github.com/openshift/client-go/console/clientset/versioned/typed/console/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeConsoleNotifications implements ConsoleNotificationInterface
type fakeConsoleNotifications struct {
	*gentype.FakeClientWithListAndApply[*v1.ConsoleNotification, *v1.ConsoleNotificationList, *consolev1.ConsoleNotificationApplyConfiguration]
	Fake *FakeConsoleV1
}

func newFakeConsoleNotifications(fake *FakeConsoleV1) typedconsolev1.ConsoleNotificationInterface {
	return &fakeConsoleNotifications{
		gentype.NewFakeClientWithListAndApply[*v1.ConsoleNotification, *v1.ConsoleNotificationList, *consolev1.ConsoleNotificationApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("consolenotifications"),
			v1.SchemeGroupVersion.WithKind("ConsoleNotification"),
			func() *v1.ConsoleNotification { return &v1.ConsoleNotification{} },
			func() *v1.ConsoleNotificationList { return &v1.ConsoleNotificationList{} },
			func(dst, src *v1.ConsoleNotificationList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ConsoleNotificationList) []*v1.ConsoleNotification {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.ConsoleNotificationList, items []*v1.ConsoleNotification) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
