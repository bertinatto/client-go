// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/api/servicecertsigner/v1alpha1"
	servicecertsignerv1alpha1 "github.com/openshift/client-go/servicecertsigner/applyconfigurations/servicecertsigner/v1alpha1"
	typedservicecertsignerv1alpha1 "github.com/openshift/client-go/servicecertsigner/clientset/versioned/typed/servicecertsigner/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeServiceCertSignerOperatorConfigs implements ServiceCertSignerOperatorConfigInterface
type fakeServiceCertSignerOperatorConfigs struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.ServiceCertSignerOperatorConfig, *v1alpha1.ServiceCertSignerOperatorConfigList, *servicecertsignerv1alpha1.ServiceCertSignerOperatorConfigApplyConfiguration]
	Fake *FakeServicecertsignerV1alpha1
}

func newFakeServiceCertSignerOperatorConfigs(fake *FakeServicecertsignerV1alpha1) typedservicecertsignerv1alpha1.ServiceCertSignerOperatorConfigInterface {
	return &fakeServiceCertSignerOperatorConfigs{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.ServiceCertSignerOperatorConfig, *v1alpha1.ServiceCertSignerOperatorConfigList, *servicecertsignerv1alpha1.ServiceCertSignerOperatorConfigApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("servicecertsigneroperatorconfigs"),
			v1alpha1.SchemeGroupVersion.WithKind("ServiceCertSignerOperatorConfig"),
			func() *v1alpha1.ServiceCertSignerOperatorConfig { return &v1alpha1.ServiceCertSignerOperatorConfig{} },
			func() *v1alpha1.ServiceCertSignerOperatorConfigList {
				return &v1alpha1.ServiceCertSignerOperatorConfigList{}
			},
			func(dst, src *v1alpha1.ServiceCertSignerOperatorConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ServiceCertSignerOperatorConfigList) []*v1alpha1.ServiceCertSignerOperatorConfig {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ServiceCertSignerOperatorConfigList, items []*v1alpha1.ServiceCertSignerOperatorConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
